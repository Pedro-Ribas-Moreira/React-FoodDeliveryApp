{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\GitHub\\\\React-FoodDeliveryApp\\\\src\\\\components\\\\Cart\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport classes from \"./Checkout.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === \"\";\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputValidity, setFormInputValidity] = useState({\n    name: true,\n    street: true,\n    postal: true,\n    city: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostal = postalInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredPostalIsValid = !isEmpty(enteredPostal);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    setFormInputValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      postal: enteredPostalIsValid,\n      city: enteredCityIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredPostalIsValid && enteredCityIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    if (formIsValid) {\n      return props.onConfirm({\n        name: enteredName,\n        street: enteredStreet,\n        postal: enteredPostal,\n        city: enteredCity\n      });\n    }\n  };\n\n  const nameControlClasses = `${classes.control} ${formInputValidity.name ? \"\" : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${formInputValidity.street ? \"\" : classes.invalid}`;\n  const postalControlClasses = `${classes.control} ${formInputValidity.postal ? \"\" : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${formInputValidity.city ? \"\" : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), !formInputValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The name field is empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), !formInputValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The street field is empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), !formInputValidity.postal && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The Postal Code field is empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), !formInputValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The City field is empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"PQNNaXl5TGOK6Bgd5qFVsETK/ZI=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["C:/Users/DELL/Documents/GitHub/React-FoodDeliveryApp/src/components/Cart/Checkout.js"],"names":["React","useRef","useState","classes","isEmpty","value","trim","Checkout","props","formInputValidity","setFormInputValidity","name","street","postal","city","nameInputRef","streetInputRef","postalInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostal","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredPostalIsValid","enteredCityIsValid","formIsValid","onConfirm","nameControlClasses","control","invalid","streetControlClasses","postalControlClasses","cityControlClasses","actions","onCancel","submit"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport classes from \"./Checkout.module.css\";\r\n\r\nconst isEmpty = (value) => value.trim() === \"\";\r\n\r\nconst Checkout = (props) => {\r\n  const [formInputValidity, setFormInputValidity] = useState({\r\n    name: true,\r\n    street: true,\r\n    postal: true,\r\n    city: true,\r\n  });\r\n  const nameInputRef = useRef();\r\n  const streetInputRef = useRef();\r\n  const postalInputRef = useRef();\r\n  const cityInputRef = useRef();\r\n\r\n  const confirmHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredName = nameInputRef.current.value;\r\n    const enteredStreet = streetInputRef.current.value;\r\n    const enteredPostal = postalInputRef.current.value;\r\n    const enteredCity = cityInputRef.current.value;\r\n\r\n    const enteredNameIsValid = !isEmpty(enteredName);\r\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\r\n    const enteredPostalIsValid = !isEmpty(enteredPostal);\r\n    const enteredCityIsValid = !isEmpty(enteredCity);\r\n\r\n    setFormInputValidity({\r\n      name: enteredNameIsValid,\r\n      street: enteredStreetIsValid,\r\n      postal: enteredPostalIsValid,\r\n      city: enteredCityIsValid,\r\n    });\r\n    const formIsValid =\r\n      enteredNameIsValid &&\r\n      enteredStreetIsValid &&\r\n      enteredPostalIsValid &&\r\n      enteredCityIsValid;\r\n\r\n    if (!formIsValid) {\r\n      return;\r\n    }\r\n    if (formIsValid) {\r\n      return props.onConfirm({\r\n        name: enteredName,\r\n        street: enteredStreet,\r\n        postal: enteredPostal,\r\n        city: enteredCity,\r\n      });\r\n    }\r\n  };\r\n\r\n  const nameControlClasses = `${classes.control} ${\r\n    formInputValidity.name ? \"\" : classes.invalid\r\n  }`;\r\n  const streetControlClasses = `${classes.control} ${\r\n    formInputValidity.street ? \"\" : classes.invalid\r\n  }`;\r\n  const postalControlClasses = `${classes.control} ${\r\n    formInputValidity.postal ? \"\" : classes.invalid\r\n  }`;\r\n  const cityControlClasses = `${classes.control} ${\r\n    formInputValidity.city ? \"\" : classes.invalid\r\n  }`;\r\n\r\n  return (\r\n    <form onSubmit={confirmHandler}>\r\n      <div className={nameControlClasses}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input type=\"text\" id=\"name\" ref={nameInputRef} />\r\n        {!formInputValidity.name && <p>The name field is empty!</p>}\r\n      </div>\r\n      <div className={streetControlClasses}>\r\n        <label htmlFor=\"street\">Street</label>\r\n        <input type=\"text\" id=\"street\" ref={streetInputRef} />\r\n        {!formInputValidity.street && <p>The street field is empty!</p>}\r\n      </div>\r\n      <div className={postalControlClasses}>\r\n        <label htmlFor=\"postal\">Postal Code</label>\r\n        <input type=\"text\" id=\"postal\" ref={postalInputRef} />\r\n        {!formInputValidity.postal && <p>The Postal Code field is empty!</p>}\r\n      </div>\r\n      <div className={cityControlClasses}>\r\n        <label htmlFor=\"city\">City</label>\r\n        <input type=\"text\" id=\"city\" ref={cityInputRef} />\r\n        {!formInputValidity.city && <p>The City field is empty!</p>}\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button type=\"button\" onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button className={classes.submit}>Confirm</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n"]},"metadata":{},"sourceType":"module"}