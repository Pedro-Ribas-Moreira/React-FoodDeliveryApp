{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\GitHub\\\\React-FoodDeliveryApp\\\\src\\\\components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"../UI/Card\";\nimport MealItem from \"./MealItem/MealItem\";\nimport classes from \"./AvailableMeals.module.css\"; // const DUMMY_MEALS = [\n//   {\n//     id: \"m1\",\n//     name: \"Nigiri\",\n//     description: \"A topping, usually fish, served on top of sushi rice\",\n//     price: 22.99,\n//   },\n//   {\n//     id: \"m2\",\n//     name: \"Sashimi\",\n//     description: \"Fish or shellfish served alone (no rice)\",\n//     price: 16.5,\n//   },\n//   {\n//     id: \"m3\",\n//     name: \"Maki\",\n//     description: \"Rice and filling wrapped in seaweed\",\n//     price: 12.99,\n//   },\n//   {\n//     id: \"m4\",\n//     name: \" \",\n//     description: \"Filling wrapped rice\",\n//     price: 18.99,\n//   },\n//   {\n//     id: \"m5\",\n//     name: \"Temaki\",\n//     description: \"Hand-rolled into a cone shape\",\n//     price: 18.99,\n//   },\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httmLoad, setHtmlLoad] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"https://react-foodapp-course-default-rtdb.europe-west1.firebasedatabase.app/meals\");\n\n      if (!response.ok) {\n        throw new Error(\"somenthing went wrong!\");\n      }\n\n      const responseData = await response.json();\n      const loadMeals = [];\n\n      for (const key in responseData) {\n        loadMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      setMeals(loadMeals);\n      setIsLoading(false);\n    };\n\n    fetchData().catch(error => {\n      setIsLoading(false);\n      setHtmlLoad(error.message);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.loading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (httmLoad) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.htmlError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Failed to fetch from database\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"t3V1Zj82l6OsTq07ebVD4UjM/MY=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["C:/Users/DELL/Documents/GitHub/React-FoodDeliveryApp/src/components/Meals/AvailableMeals.js"],"names":["React","useEffect","useState","Card","MealItem","classes","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httmLoad","setHtmlLoad","fetchData","response","fetch","ok","Error","responseData","json","loadMeals","key","push","id","name","description","price","catch","error","message","loading","htmlError","mealsList","map","meal"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Card from \"../UI/Card\";\r\nimport MealItem from \"./MealItem/MealItem\";\r\nimport classes from \"./AvailableMeals.module.css\";\r\n\r\n// const DUMMY_MEALS = [\r\n//   {\r\n//     id: \"m1\",\r\n//     name: \"Nigiri\",\r\n//     description: \"A topping, usually fish, served on top of sushi rice\",\r\n//     price: 22.99,\r\n//   },\r\n//   {\r\n//     id: \"m2\",\r\n//     name: \"Sashimi\",\r\n//     description: \"Fish or shellfish served alone (no rice)\",\r\n//     price: 16.5,\r\n//   },\r\n//   {\r\n//     id: \"m3\",\r\n//     name: \"Maki\",\r\n//     description: \"Rice and filling wrapped in seaweed\",\r\n//     price: 12.99,\r\n//   },\r\n//   {\r\n//     id: \"m4\",\r\n//     name: \" \",\r\n//     description: \"Filling wrapped rice\",\r\n//     price: 18.99,\r\n//   },\r\n//   {\r\n//     id: \"m5\",\r\n//     name: \"Temaki\",\r\n//     description: \"Hand-rolled into a cone shape\",\r\n//     price: 18.99,\r\n//   },\r\n// ];\r\n\r\nconst AvailableMeals = () => {\r\n  const [meals, setMeals] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [httmLoad, setHtmlLoad] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\r\n        \"https://react-foodapp-course-default-rtdb.europe-west1.firebasedatabase.app/meals\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"somenthing went wrong!\");\r\n      }\r\n      const responseData = await response.json();\r\n\r\n      const loadMeals = [];\r\n      for (const key in responseData) {\r\n        loadMeals.push({\r\n          id: key,\r\n          name: responseData[key].name,\r\n          description: responseData[key].description,\r\n          price: responseData[key].price,\r\n        });\r\n      }\r\n\r\n      setMeals(loadMeals);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData().catch((error) => {\r\n      setIsLoading(false);\r\n      setHtmlLoad(error.message);\r\n    });\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className={classes.loading}>\r\n        <p>Loading...</p>\r\n      </div>\r\n    );\r\n  }\r\n  if (httmLoad) {\r\n    return (\r\n      <div className={classes.htmlError}>\r\n        <p>Failed to fetch from database</p>\r\n      </div>\r\n    );\r\n  }\r\n  const mealsList = meals.map((meal) => (\r\n    <MealItem\r\n      key={meal.id}\r\n      id={meal.id}\r\n      name={meal.name}\r\n      description={meal.description}\r\n      price={meal.price}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <section className={classes.meals}>\r\n      <Card>\r\n        <ul>{mealsList}</ul>\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AvailableMeals;\r\n"]},"metadata":{},"sourceType":"module"}